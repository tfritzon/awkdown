#!/usr/bin/awk -f

BEGIN {
    in_paragraph= 0
    in_blockquote= 0
    in_ul= 0
    ul_depth= 0
    in_ol= 0
    in_italics= 0
    in_bold= 0
    in_link= 0
    in_table= 0
    emitted= 0
}

# Init lookahead
FNR == 1 {
    getline nextline < FILENAME
    getline nextline < FILENAME
}

# Drop setext header marks
/^[=-]+$/ {
    getline
    getline nextline < FILENAME
}

# Escape all ampersands (HTML rule)
/&/ {
    gsub(/&/, "\\&amp;", $0)
}

# Restore ampersands part of HTML character escape
/&amp;[A-Za-z]{2,4};/ {
    gsub(/&amp;/, "\\&", $0)
}

# Escape less than (<) (HTML rule)
/</ {
    gsub("<", "\\&lt;", $0)
}

# line break
/^.*[ ]{2}$/ {
    sub( /[ ]{2}$/, "<br />", $0 )
}

# block quote
/^>/ {
    if( (! in_blockquote) && (! emitted) ) {
	print "<blockquote><p>"
	in_blockquote= 1
	in_paragraph= 1
    }
    sub(/^>[ ]*/, "", $0)
}

# table
/^[ ]*[|]/ {
    #print "<!-- table -->"
    if( ! in_table ) {
        print "<table>"
        in_table= 1
        in_paragraph= 1
    }
    if( match($0, /---/) )
        emitted= 1
    else if( match(nextline, /---/) ) {
        sub(/^[ ]*[|][ ]*/, "<tr><th>", $0)
        sub(/[ ]*[|][ ]*$/, "</th></tr>", $0)
        gsub(/[ ]*[|][ ]*/, "</th><th>", $0)
    } else {
        sub(/^[ ]*[|][ ]*/, "<tr><td>", $0)
        sub(/[ ]*[|][ ]*$/, "</td></tr>", $0)
        gsub(/[ ]*[|][ ]*/, "</td><td>", $0)
    }
}

# ATX headers
/^#/ {
    n= match($0, /^#+/)
    header_lvl= RLENGTH
    repl= sprintf("<h%d>", header_lvl)
    sub(/^#+ ?/, repl, $0)

    repl= sprintf("</h%d>", header_lvl)
    if( match($0, /#+$/) )
	sub(/ ?#+$/, repl, $0)
    else
	sub(/$/, repl, $0)
    print
    emitted= 1
}

# unordered list
/^[ ]*[*+-] / {
    uld= match($0, /[*+-]/)
    if( uld > ul_depth ) {
        sub(/^[ ]*[*+-][ ]*/, "<ul><li>", $0)
        in_ul++
        in_paragraph= 1
    } else if( uld < ul_depth ) {
        sub(/^[ ]*[*+-][ ]*/, "</ul><li>", $0)
        in_ul--
    } else {
        sub(/^[ ]*[*+-][ ]*/, "<li>", $0)
    }        
    ul_depth= uld

    uld= match(nextline, /[*+-]/)
    if( uld <= ul_depth ) {
        sub(/$/, "</li>", $0)
    }
}

# ordered list
/^(([0-9]+)|([A-Za-z])|([iIvVxXlL]{1,4}))[.]/ {
    t= "1"
    if( $0 ~ /[ivxl]+[.]/ ) {
	t= "i"
	sub(/^[ivxl]{1,4}[.][ ]*/, "<li>", $0)
    } else if( $0 ~ /[IVXL]+[.]/ ) {
	t= "I"
	sub(/^[IVXL]{1,4}[.][ ]*/, "<li>", $0)
    } else if( $0 ~ /^[A-Z]./ ) {
	t= "A"
	sub(/^[A-Z][.][ ]*/, "<li>", $0)
    } else if( $0 ~ /^[a-z]./ ) {
	t= "a"
	sub(/^[a-z][.][ ]*/, "<li>", $0)
    } else {
	sub(/^[0-9]+[.][ ]*/, "<li>", $0)
    }
    if( ! in_ol ) {
	printf("<ol type=\"%s\">\n", t)
	in_ol= 1
	in_paragraph= 1
    }
    sub(/$/, "</li>", $0)
}

# Links
/\[.*\]\(.*\)/ {
    in_link= 1
    s = ""
    if( match($0, /(\[.*\])(\(.*)( ".*"\))/, tla) ) {
	l= substr(tla[2], 2)
	match(tla[3], /".*"/)
	a= substr(tla[3], RSTART, RLENGTH)
	match(tla[1], /\[.*\]/)
	t= substr(tla[1], RSTART+1, RLENGTH-2)
	s= sprintf("<a href=\"%s\" alt=%s>%s</a>", l, a, t)
    } else if( match($0, /(\[.*\])(\(.*\))/, tl) ) {
	match(tl[2], /\(.*\)/)
	l= substr(tl[2], RSTART+1, RLENGTH-2)
	match(tl[1], /\[.*\]/)
	t= substr(tl[1], RSTART+1, RLENGTH-2)
	s= sprintf("<a href=\"%s\">%s</a>", l, t)
    }
    sub(/\[.*\)/, s)
}

# bold
/[*_][*_]/ {
    if( !in_link && !in_codeblock && !in_code ) {
	while( $0 ~ /[*_][*_]/ ) {
	    if( ! in_bold ) {
		sub(/[*_][*_]/, "<b>", $0)
		in_bold= 1
	    } else {
		sub(/[*_][*_]/, "</b>", $0)
		in_bold= 0
	    }
	}
    }
}

# italics
/[*_]/ {
    if( !in_link && !in_codeblock && !in_code ) {
	while( $0 ~ /[*_]/ ) {
	    if( ! in_italics ) {
		sub(/[*_]/, "<i>", $0)
		in_italics= 1
	    } else {
		sub(/[*_]/, "</i>", $0)
		in_italics= 0
	    }
	}
    }
}

# strikethrough
/~~/ {
    if( !in_link && !in_codeblock && !in_code ) {
	while( $0 ~ /~~/ ) {
	    if( ! in_strike ) {
		sub(/~~/, "<strike>", $0)
		in_strike= 1
	    } else {
		sub(/~~/, "</strike>", $0)
		in_strike= 0
	    }
	}
    }
}

# code block
/^```/ {
    if( ! in_codeblock ) {
	sub(/```/, "<pre>", $0)
	in_codeblock= 1
    } else {
	sub(/```/, "</pre>", $0)
	in_codeblock= 0
    }
}

# code in text
/`/ {
    if( !in_link ) {
	while( $0 ~ /`/ ) {
	    if( ! in_code ) {
		sub(/`/, "<code>", $0)
		in_code= 1
	    } else {
		sub(/`/, "</code>", $0)
		in_code= 0
	    }
	}
    }
}

# empty line
/^$/ {
    if( in_blockquote && (! match(nextline, /^>/)) ) {
	print "</p></blockquote>"
	in_blockquote= 0
	in_paragraph= 0
    }

    if( in_table ) {
        print "</table>"
        in_table= 0
        in_paragraph= 0
    }
    
    if( in_ul ) {
        while( in_ul > 0 ) {
            print "</ul>"
            in_ul--
        }
        ul_depth= 0
        in_paragraph= 0
    }

    if( in_ol ) {
	print "</ol>"
	in_ol= 0
	in_paragraph= 0
    }

    if( in_italics ) {
	print "</i>"
	in_italics= 0
    }

    if( in_bold ) {
	print "</b>"
	in_bold= 0
    }

    if( in_paragraph ) {
	print "</p>"
	in_paragraph= 0
    }

}

# paragraph and/or setext header
$0 !~ /^$/ {

    if( match(nextline, /^[=]+$/) ) {
	printf("<h1>%s</h1>\n", $0)
	emitted= 1
    }

    if( match(nextline, /^[-]+$/) ) {
	printf("<h2>%s</h2>\n", $0)
	emitted= 1
    }

    if( (! in_paragraph) && (! emitted) ) {
	print "<p>"
	in_paragraph= 1
    }
}

# Finally: print the line
{
    if( ! emitted )
	print
    emitted= 0
    getline nextline < FILENAME
}

END {
    if( in_table ) {
        print "</table>"
        in_paragraph= 0
    }
    
    if( in_ul ) {
	print "</ul>"
	in_paragraph= 0
    }

    if( in_ol ) {
	print "</ol>"
	in_paragraph= 0
    }

    if( in_blockquote ) {
	print "</p></blockquote>"
	in_paragraph= 0
    }

    if( in_italics ) {
	print "</i>"
	in_italics= 0
    }

    if( in_bold ) {
	print "</b>"
	in_bold= 0
    }

    if( in_strike ) {
	print "</strike>"
	in_code= 0
    }

    if( in_code ) {
	print "</code>"
	in_code= 0
    }

    if( in_paragraph )
	print "</p>"
}
